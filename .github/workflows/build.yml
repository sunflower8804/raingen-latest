name: PyInstaller build

on: [push]

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact_name: Raingen_Windows_default.zip
            python_version: "3.11"
            python_arch: "x64"
            itch_channel: win64_10
            api_artifact_name: win10+
            
          - os: windows-latest
            artifact_name: Raingen_Win64.zip
            python_version: "3.8"
            python_arch: "x64"
            itch_channel: win64
            api_artifact_name: win64
            
          - os: windows-2019
            artifact_name: Raingen_Win32.zip
            python_version: "3.8"
            python_arch: "x86"
            itch_channel: win32
            api_artifact_name: win32
            
          - os: macos-13
            artifact_name: Raingen_macOS.dmg
            python_version: "3.11"
            python_arch: "x64"
            itch_channel: osx64
            api_artifact_name: macOS
            
          - os: ubuntu-20.04
            artifact_name: Raingen_Linux_glibc2.31+.tar.xz
            python_version: "3.11"
            python_arch: "x64"
            itch_channel: linux64_glibc_231
            api_artifact_name: linux2.31
            
          - os: ubuntu-22.04
            artifact_name: Raingen_Linux_glibc2.35+.tar.xz
            python_version: "3.11"
            python_arch: "x64"
            itch_channel: linux64_glibc_235
            api_artifact_name: linux2.35
            
    runs-on: ${{ matrix.os }}
    if: ${{ !startsWith(github.ref, 'ref/heads/release') }}
    env:
      gpg_private_key: ${{ secrets.PACKAGESIGNKEY }}
      gpg_private_key_passphrase: ${{ secrets.PACKAGESIGNKEYPASSPHRASE }}
      update_api_push_token: ${{ secrets.UPDATE_API_DEPLOY_KEY }}
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: latest
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}
          architecture: ${{ matrix.python_arch }}
          cache: "poetry"
      - name: Install build dependencies (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential zlib1g-dev
      - name: Install build dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install zlib
      - name: Install Visual Studio Build Tools (Windows)
        if: startsWith(matrix.os, 'windows')
        uses: microsoft/setup-msbuild@v1.1
      - name: Set up cargo cache (Windows)
        if: startsWith(matrix.os, 'windows')
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: install dependencies
        run: poetry install --with build -E discord
      - name: Build PyInstaller bootloader
        run: |
          git clone https://github.com/pyinstaller/pyinstaller.git
          cd pyinstaller
          git checkout v6.11.0
          cd bootloader
          python ./waf all
          cd ../../
          poetry run pip install -e pyinstaller
      - name: Configure dev
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "VERSION_NUMBER=${{ github.sha }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${{ vars.DEVELOPMENT_RELEASE_CHANNEL }}" >> $GITHUB_ENV
      - name: Configure release
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "VERSION_NUMBER=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${{ vars.STABLE_RELEASE_CHANNEL }}" >> $GITHUB_ENV
      - name: Write version file
        run: |
          echo "[DEFAULT]" > version.ini
          echo "version_number=${{ env.VERSION_NUMBER }}" >> version.ini
          echo "release_channel=${{ env.RELEASE_CHANNEL }}" >> version.ini
          echo "upstream=${{ github.repository }}" >> version.ini
      - name: Build self-updater binary (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          cd self_updater
          cargo build --release
          cp target/release/self_updater.exe ../resources/
      - name: Run PyInstaller (Development)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: poetry run python -m PyInstaller Raingen.spec
        env:
          IS_RELEASE: 0
      - name: Run PyInstaller (Release)
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: poetry run python -m PyInstaller Raingen.spec
        env:
          IS_RELEASE: 1
      - name: Create archive (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: tar -caf ${{ matrix.artifact_name }} -C dist Raingen
      - name: Create archive (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: powershell
        run: |
          cp dist/Raingen/_internal/.itch.toml dist/ 
          tar.exe -a -c -f ${{ matrix.artifact_name }} -C dist Raingen .itch.toml
      - name: Create DMG (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          rm -r dist/Raingen
          npm install -g archanyhm/node-appdmg
          appdmg appdmg.json ${{ matrix.artifact_name }}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        if: ${{ env.gpg_private_key != '' && env.gpg_private_key_passphrase != '' }}
        with:
          gpg_private_key: ${{ secrets.PACKAGESIGNKEY }}
          passphrase: ${{ secrets.PACKAGESIGNKEYPASSPHRASE }}
      - name: Upload artifact to API
        if: ${{ env.update_api_push_token != '' && (github.ref == 'refs/heads/development' || startsWith(github.ref, 'refs/tags/')) }}
        run: |
          if [[ "${{ matrix.os }}" == "macos-13" ]]; then
            zip ${{ matrix.artifact_name }}.zip ./${{ matrix.artifact_name }}
            gpg --output ${{ matrix.artifact_name }}.zip.sig --detach-sig -a ${{ matrix.artifact_name }}.zip
            BUNDLE_NAME="${{ matrix.artifact_name }}.zip"
          else
            gpg --output ${{ matrix.artifact_name }}.sig --detach-sig -a ${{ matrix.artifact_name }}
            BUNDLE_NAME="${{ matrix.artifact_name }}"
          fi
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ matrix.artifact_name }}

  confirm_release:
    runs-on: ubuntu-22.04
    if: ${{ vars.USE_UPDATE_API != '' && (github.ref == 'refs/heads/development' || startsWith(github.ref, 'refs/tags/')) }}
    needs: build
    steps:
      - name: Configure dev
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "VERSION_NUMBER=${{ github.sha }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${{ vars.DEVELOPMENT_RELEASE_CHANNEL }}" >> $GITHUB_ENV
      - name: Configure release
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "VERSION_NUMBER=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=${{ vars.STABLE_RELEASE_CHANNEL }}" >> $GITHUB_ENV
